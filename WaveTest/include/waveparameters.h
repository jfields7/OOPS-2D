#ifndef WAVE_PARAMETERS_H
#define WAVE_PARAMETERS_H

#include <parameters.h>
#include <types.h>
#include <string>

// DO NOT MODIFY - This file is automatically generated during compilation.

class WaveParameters : public Parameters {
  public:
    enum InitialConditions{
      GAUSSIAN,
      FLAT,
    };

    WaveParameters() : Parameters(1){
      mInitialConditions = GAUSSIAN;
      mGridPointsX = 101;
      mGridPointsY = 101;
      mDomainMinX = -1.0;
      mDomainMaxX = 1.0;
      mDomainMinY = -1.0;
      mDomainMaxY = 1.0;
      mProjectName = "Wave Test";
      mTimeStart = 0.0;
      mTimeEnd = 1.0;
      mGhostPoints = 3;
      mMinCFL = 0.1;
      mMaxCFL = 0.75;
      mErrorTolerance = 1e-06;
    }

    inline void setInitialConditions(InitialConditions val){
      mInitialConditions = val;
    }

    inline InitialConditions getInitialConditions(){
      return mInitialConditions;
    }

    inline void setGridPointsX(int GridPointsX){
      mGridPointsX = GridPointsX;
    }

    inline int getGridPointsX(){
      return mGridPointsX;
    }

    inline void setGridPointsY(int GridPointsY){
      mGridPointsY = GridPointsY;
    }

    inline int getGridPointsY(){
      return mGridPointsY;
    }

    inline void setDomainMinX(double DomainMinX){
      mDomainMinX = DomainMinX;
    }

    inline double getDomainMinX(){
      return mDomainMinX;
    }

    inline void setDomainMaxX(double DomainMaxX){
      mDomainMaxX = DomainMaxX;
    }

    inline double getDomainMaxX(){
      return mDomainMaxX;
    }

    inline void setDomainMinY(double DomainMinY){
      mDomainMinY = DomainMinY;
    }

    inline double getDomainMinY(){
      return mDomainMinY;
    }

    inline void setDomainMaxY(double DomainMaxY){
      mDomainMaxY = DomainMaxY;
    }

    inline double getDomainMaxY(){
      return mDomainMaxY;
    }

    inline void setProjectName(std::string ProjectName){
      mProjectName = ProjectName;
    }

    inline std::string getProjectName(){
      return mProjectName;
    }

    inline void setTimeStart(double TimeStart){
      mTimeStart = TimeStart;
    }

    inline double getTimeStart(){
      return mTimeStart;
    }

    inline void setTimeEnd(double TimeEnd){
      mTimeEnd = TimeEnd;
    }

    inline double getTimeEnd(){
      return mTimeEnd;
    }

    inline void setGhostPoints(int GhostPoints){
      mGhostPoints = GhostPoints;
    }

    inline int getGhostPoints(){
      return mGhostPoints;
    }

    inline void setMinCFL(double MinCFL){
      mMinCFL = MinCFL;
    }

    inline double getMinCFL(){
      return mMinCFL;
    }

    inline void setMaxCFL(double MaxCFL){
      mMaxCFL = MaxCFL;
    }

    inline double getMaxCFL(){
      return mMaxCFL;
    }

    inline void setErrorTolerance(double ErrorTolerance){
      mErrorTolerance = ErrorTolerance;
    }

    inline double getErrorTolerance(){
      return mErrorTolerance;
    }

    Result broadcastParameters();

  private:
    InitialConditions mInitialConditions;
    int mGridPointsX;
    int mGridPointsY;
    double mDomainMinX;
    double mDomainMaxX;
    double mDomainMinY;
    double mDomainMaxY;
    std::string mProjectName;
    double mTimeStart;
    double mTimeEnd;
    int mGhostPoints;
    double mMinCFL;
    double mMaxCFL;
    double mErrorTolerance;
};

#endif
