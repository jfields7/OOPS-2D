#include <testparser.h>
#include <iostream>

using namespace std;

// DO NOT MODIFY - This file is automatically generated during compilation.

void TestParser::updateParameters(string fname, Parameters* params){
  if(!checkId(params)){
    return;
  }
  reader.clearData();
  ParamReader::ParamResult result = reader.readFile(fname);
  if(result != ParamReader::SUCCESS){
    cout << "An error occurred while trying to read " << fname << ".\n";
    return;
  }
  TestParameters *pars = (TestParameters*) params;

  if(!reader.hasSection(string("Test"))){
    return;
  }

  if(reader.hasParameter(string("Test"),string("InitialConditions"))){
    string result = reader.readAsString(string("Test"),string("InitialConditions"));
    if(result.compare("GAUSSIAN") == 0){
      pars->setInitialConditions(TestParameters::GAUSSIAN);
    }
    else if(result.compare("FLAT") == 0){
      pars->setInitialConditions(TestParameters::FLAT);
    }
    else {
      cout << "The value for parameter InitialConditions is out of range.\n";
    }
  }

  if(reader.hasParameter(string("Test"),string("GridPointsX"))){
    int result = reader.readAsInt(string("Test"),string("GridPointsX"));
    if(result <= 128000 && result >= 7){
      pars->setGridPointsX(result);
    }
    else{
      cout << "Parameter GridPointsX out of range.\n";
    }
  }

  if(reader.hasParameter(string("Test"),string("GridPointsY"))){
    int result = reader.readAsInt(string("Test"),string("GridPointsY"));
    if(result <= 128000 && result >= 7){
      pars->setGridPointsY(result);
    }
    else{
      cout << "Parameter GridPointsY out of range.\n";
    }
  }

  if(reader.hasParameter(string("Test"),string("DomainMinX"))){
    double result = reader.readAsDouble(string("Test"),string("DomainMinX"));
    if(result <= 1.000000e+06 && result >= -1.000000e+06){
      pars->setDomainMinX(result);
    }
    else{
      cout << "Parameter DomainMinX out of range.\n";
    }
  }

  if(reader.hasParameter(string("Test"),string("DomainMaxX"))){
    double result = reader.readAsDouble(string("Test"),string("DomainMaxX"));
    if(result <= 1.000000e+06 && result >= -1.000000e+06){
      pars->setDomainMaxX(result);
    }
    else{
      cout << "Parameter DomainMaxX out of range.\n";
    }
  }

  if(reader.hasParameter(string("Test"),string("DomainMinY"))){
    double result = reader.readAsDouble(string("Test"),string("DomainMinY"));
    if(result <= 1.000000e+06 && result >= -1.000000e+06){
      pars->setDomainMinY(result);
    }
    else{
      cout << "Parameter DomainMinY out of range.\n";
    }
  }

  if(reader.hasParameter(string("Test"),string("DomainMaxY"))){
    double result = reader.readAsDouble(string("Test"),string("DomainMaxY"));
    if(result <= 1.000000e+06 && result >= -1.000000e+06){
      pars->setDomainMaxY(result);
    }
    else{
      cout << "Parameter DomainMaxY out of range.\n";
    }
  }

  if(reader.hasParameter(string("Test"),string("ProjectName"))){
    string result = reader.readAsString(string("Test"),string("ProjectName"));
    if(result.compare("NULL") != 0){
      pars->setProjectName(result);
    }
    else{
      cout << "Parameter %s is not a string.\n";
    }
  }

}

