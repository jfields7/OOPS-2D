#ifndef WAVE_PARAMETERS_H
#define WAVE_PARAMETERS_H

#include <parameters.h>
#include <types.h>
#include <string>

// DO NOT MODIFY - This file is automatically generated during compilation.

class WaveParameters : public Parameters {
  public:
    enum InitialConditions{
      GAUSSIAN,
      FLAT,
    };

    WaveParameters() : Parameters(1){
      mInitialConditions = GAUSSIAN;
      mGridPointsR = 101;
      mGridPointsT = 11;
      mDomainMinR = -1.0;
      mDomainMaxR = 1.0;
      mProjectName = "Wave Test";
      mTimeStart = 0.0;
      mTimeEnd = 1.0;
      mGhostPoints = 3;
    }

    inline void setInitialConditions(InitialConditions val){
      mInitialConditions = val;
    }

    inline InitialConditions getInitialConditions(){
      return mInitialConditions;
    }

    inline void setGridPointsR(int GridPointsR){
      mGridPointsR = GridPointsR;
    }

    inline int getGridPointsR(){
      return mGridPointsR;
    }

    inline void setGridPointsT(int GridPointsT){
      mGridPointsT = GridPointsT;
    }

    inline int getGridPointsT(){
      return mGridPointsT;
    }

    inline void setDomainMinR(double DomainMinR){
      mDomainMinR = DomainMinR;
    }

    inline double getDomainMinR(){
      return mDomainMinR;
    }

    inline void setDomainMaxR(double DomainMaxR){
      mDomainMaxR = DomainMaxR;
    }

    inline double getDomainMaxR(){
      return mDomainMaxR;
    }

    inline void setProjectName(std::string ProjectName){
      mProjectName = ProjectName;
    }

    inline std::string getProjectName(){
      return mProjectName;
    }

    inline void setTimeStart(double TimeStart){
      mTimeStart = TimeStart;
    }

    inline double getTimeStart(){
      return mTimeStart;
    }

    inline void setTimeEnd(double TimeEnd){
      mTimeEnd = TimeEnd;
    }

    inline double getTimeEnd(){
      return mTimeEnd;
    }

    inline void setGhostPoints(int GhostPoints){
      mGhostPoints = GhostPoints;
    }

    inline int getGhostPoints(){
      return mGhostPoints;
    }

    Result broadcastParameters();

  private:
    InitialConditions mInitialConditions;
    int mGridPointsR;
    int mGridPointsT;
    double mDomainMinR;
    double mDomainMaxR;
    std::string mProjectName;
    double mTimeStart;
    double mTimeEnd;
    int mGhostPoints;
};

#endif
